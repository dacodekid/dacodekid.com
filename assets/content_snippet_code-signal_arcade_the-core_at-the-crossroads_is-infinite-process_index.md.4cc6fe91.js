import{_ as s,o as a,c as n,Q as e}from"./chunks/framework.b2e84fab.js";const b=JSON.parse('{"title":"Is Infinite Process?","description":"","frontmatter":{"title":"Is Infinite Process?"},"headers":[],"relativePath":"content/snippet/code-signal/arcade/the-core/at-the-crossroads/is-infinite-process/index.md","filePath":"content/snippet/code-signal/arcade/the-core/at-the-crossroads/is-infinite-process/index.md"}'),p={name:"content/snippet/code-signal/arcade/the-core/at-the-crossroads/is-infinite-process/index.md"},l=e(`<h1 id="is-infinite-process" tabindex="-1">Is Infinite Process? <a class="header-anchor" href="#is-infinite-process" aria-label="Permalink to &quot;Is Infinite Process?&quot;">​</a></h1><p>Given integers <code>a</code> and <code>b</code>, determine whether the following pseudocode results in an infinite loop</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">while a is not equal to b do</span></span>
<span class="line"><span style="color:#e1e4e8;">  increase a by 1</span></span>
<span class="line"><span style="color:#e1e4e8;">  decrease b by 1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">while a is not equal to b do</span></span>
<span class="line"><span style="color:#24292e;">  increase a by 1</span></span>
<span class="line"><span style="color:#24292e;">  decrease b by 1</span></span></code></pre></div><p>Assume that the program is executed on a virtual machine which can store arbitrary long numbers and execute forever.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><ul><li><p>For <code>a = 2</code> and <code>b = 6</code>, the output should be</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">is_infinite_process(a, b) = false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">is_infinite_process(a, b) = false</span></span></code></pre></div></li><li><p>For <code>a = 2</code> and <code>b = 3</code>, the output should be</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">is_infinite_process(a, b) = true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">is_infinite_process(a, b) = true</span></span></code></pre></div></li></ul><h2 id="solution" tabindex="-1">Solution <a class="header-anchor" href="#solution" aria-label="Permalink to &quot;Solution&quot;">​</a></h2><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-pSIlK" id="tab-f927mK9" checked="checked"><label for="tab-f927mK9">PYTHON</label></div><div class="blocks"><div class="language-py vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">is_infinite_process</span><span style="color:#E1E4E8;">(a, b):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (a </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">or</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(is_infinite_process(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(is_infinite_process(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">))  </span><span style="color:#6A737D;"># TRUE</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(is_infinite_process(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">is_infinite_process</span><span style="color:#24292E;">(a, b):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (a </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">or</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(is_infinite_process(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(is_infinite_process(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">))  </span><span style="color:#6A737D;"># TRUE</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(is_infinite_process(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></div></div>`,8),o=[l];function t(c,i,r,d,y,E){return a(),n("div",null,o)}const u=s(p,[["render",t]]);export{b as __pageData,u as default};
