import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.QBCT-Upj.js";const h=JSON.parse('{"title":"Count the smiley faces!","description":"","frontmatter":{"title":"Count the smiley faces!"},"headers":[],"relativePath":"content/snippet/codewars/6-kyu/count-the-smiley-faces/index.md","filePath":"content/snippet/codewars/6-kyu/count-the-smiley-faces/index.md"}'),e={name:"content/snippet/codewars/6-kyu/count-the-smiley-faces/index.md"},o=l(`<h1 id="count-the-smiley-faces" tabindex="-1">Count the smiley faces! <a class="header-anchor" href="#count-the-smiley-faces" aria-label="Permalink to &quot;Count the smiley faces!&quot;">​</a></h1><p>Given an array (arr) as an argument complete the function <code>countSmileys</code> that should return the total number of smiling faces.</p><h2 id="rules" tabindex="-1">Rules: <a class="header-anchor" href="#rules" aria-label="Permalink to &quot;Rules:&quot;">​</a></h2><ul><li>Each smiley face must contain a valid pair of eyes. Eyes can be marked as <code>:</code> or <code>;</code></li><li>A smiley face can have a nose but it does not have to. Valid characters for a nose are <code>-</code> or <code>~</code></li><li>Every smiling face must have a smiling mouth that should be marked with either <code>)</code> or <code>D</code></li><li>No additional characters are allowed except for those mentioned.</li></ul><div class="tip custom-block"><p class="custom-block-title">Tip</p><p><strong>Valid smiley face examples:</strong> <code>:) :D ;-D :~)</code></p><p><strong>Invalid smiley faces:</strong> <code>;( :&gt; :} :]</code></p></div><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">count_the_smiley_faces([&#39;:)&#39;, &#39;;(&#39;, &#39;;}&#39;, &#39;:-D&#39;]);       // should return 2;</span></span>
<span class="line"><span style="color:#e1e4e8;">count_the_smiley_faces([&#39;;D&#39;, &#39;:-(&#39;, &#39;:-)&#39;, &#39;;~)&#39;]);     // should return 3;</span></span>
<span class="line"><span style="color:#e1e4e8;">count_the_smiley_faces([&#39;;]&#39;, &#39;:[&#39;, &#39;;*&#39;, &#39;:$&#39;, &#39;;-D&#39;]); // should return 1;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">count_the_smiley_faces([&#39;:)&#39;, &#39;;(&#39;, &#39;;}&#39;, &#39;:-D&#39;]);       // should return 2;</span></span>
<span class="line"><span style="color:#24292e;">count_the_smiley_faces([&#39;;D&#39;, &#39;:-(&#39;, &#39;:-)&#39;, &#39;;~)&#39;]);     // should return 3;</span></span>
<span class="line"><span style="color:#24292e;">count_the_smiley_faces([&#39;;]&#39;, &#39;:[&#39;, &#39;;*&#39;, &#39;:$&#39;, &#39;;-D&#39;]); // should return 1;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>In case of an empty array return 0. You will not be tested with invalid input (input will always be an array). Order of the face (eyes, nose, mouth) elements will always be the same.</p></div><h2 id="solution" tabindex="-1">Solution <a class="header-anchor" href="#solution" aria-label="Permalink to &quot;Solution&quot;">​</a></h2><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-j_Ifx" id="tab-QSZgB9K" checked="checked"><label for="tab-QSZgB9K">PYTHON</label></div><div class="blocks"><div class="language-py vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">count_the_smiley_faces</span><span style="color:#E1E4E8;">(x, y):</span></span>
<span class="line"><span style="color:#E1E4E8;">    x_total, y_total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    x_total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">ord</span><span style="color:#E1E4E8;">(x[i]) </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">64</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(x)))</span></span>
<span class="line"><span style="color:#E1E4E8;">    y_total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">ord</span><span style="color:#E1E4E8;">(y[i]) </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">64</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(y)))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> x_total </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> y_total </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> y </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> x_total </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> y_total </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Tie!&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(count_the_smiley_faces(</span><span style="color:#9ECBFF;">&quot;AAA&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Z&quot;</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">count_the_smiley_faces</span><span style="color:#24292E;">(x, y):</span></span>
<span class="line"><span style="color:#24292E;">    x_total, y_total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    x_total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">ord</span><span style="color:#24292E;">(x[i]) </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">64</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(x)))</span></span>
<span class="line"><span style="color:#24292E;">    y_total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">ord</span><span style="color:#24292E;">(y[i]) </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">64</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(y)))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> x_total </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> y_total </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> x_total </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> y_total </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Tie!&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(count_the_smiley_faces(</span><span style="color:#032F62;">&quot;AAA&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Z&quot;</span><span style="color:#24292E;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></div></div>`,10),p=[o];function t(c,r,i,y,E,d){return a(),n("div",null,p)}const m=s(e,[["render",t]]);export{h as __pageData,m as default};
