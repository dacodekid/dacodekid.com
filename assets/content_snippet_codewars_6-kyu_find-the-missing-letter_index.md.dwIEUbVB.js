import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.QBCT-Upj.js";const F=JSON.parse('{"title":"Find the Missing Letter","description":"","frontmatter":{"title":"Find the Missing Letter"},"headers":[],"relativePath":"content/snippet/codewars/6-kyu/find-the-missing-letter/index.md","filePath":"content/snippet/codewars/6-kyu/find-the-missing-letter/index.md"}'),e={name:"content/snippet/codewars/6-kyu/find-the-missing-letter/index.md"},p=l(`<h1 id="find-the-missing-letter" tabindex="-1">Find the Missing Letter <a class="header-anchor" href="#find-the-missing-letter" aria-label="Permalink to &quot;Find the Missing Letter&quot;">​</a></h1><p>Write a method that takes an array of consecutive (increasing) letters as input and that returns the missing letter in the array.</p><p>You will always get an valid array. And it will be always exactly one letter be missing. The length of the array will always be at least 2.</p><p>The array will always contain letters in only one case.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;f&#39;] -&gt; &#39;e&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">[&#39;O&#39;,&#39;Q&#39;,&#39;R&#39;,&#39;S&#39;] -&gt; &#39;P&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;f&#39;] -&gt; &#39;e&#39;</span></span>
<span class="line"><span style="color:#24292e;">[&#39;O&#39;,&#39;Q&#39;,&#39;R&#39;,&#39;S&#39;] -&gt; &#39;P&#39;</span></span></code></pre></div><h2 id="solution" tabindex="-1">Solution <a class="header-anchor" href="#solution" aria-label="Permalink to &quot;Solution&quot;">​</a></h2><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-oMEr1" id="tab-Tz3jjwA" checked="checked"><label for="tab-Tz3jjwA">PYTHON</label></div><div class="blocks"><div class="language-py vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">find_the_missing_letter</span><span style="color:#E1E4E8;">(chars):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(chars)):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ord</span><span style="color:#E1E4E8;">(chars[i]) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ord</span><span style="color:#E1E4E8;">(chars[i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]):</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chr</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">ord</span><span style="color:#E1E4E8;">(chars[i]) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(find_the_missing_letter([</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;c&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;d&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;f&#39;</span><span style="color:#E1E4E8;">]))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">find_the_missing_letter</span><span style="color:#24292E;">(chars):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(chars)):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ord</span><span style="color:#24292E;">(chars[i]) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ord</span><span style="color:#24292E;">(chars[i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]):</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chr</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">ord</span><span style="color:#24292E;">(chars[i]) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(find_the_missing_letter([</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;c&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;d&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;f&#39;</span><span style="color:#24292E;">]))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></div></div>`,8),o=[p];function t(r,c,i,y,E,d){return a(),n("div",null,o)}const u=s(e,[["render",t]]);export{F as __pageData,u as default};
