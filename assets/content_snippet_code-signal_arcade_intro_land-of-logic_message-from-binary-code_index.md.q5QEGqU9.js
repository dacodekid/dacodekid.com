import{_ as s,o as a,c as n,Q as e}from"./chunks/framework.QBCT-Upj.js";const u=JSON.parse('{"title":"Message From Binary Code","description":"","frontmatter":{"title":"Message From Binary Code"},"headers":[],"relativePath":"content/snippet/code-signal/arcade/intro/land-of-logic/message-from-binary-code/index.md","filePath":"content/snippet/code-signal/arcade/intro/land-of-logic/message-from-binary-code/index.md"}'),o={name:"content/snippet/code-signal/arcade/intro/land-of-logic/message-from-binary-code/index.md"},l=e(`<h1 id="message-from-binary-code" tabindex="-1">Message From Binary Code <a class="header-anchor" href="#message-from-binary-code" aria-label="Permalink to &quot;Message From Binary Code&quot;">​</a></h1><p>You are taking part in an Escape Room challenge designed specifically for programmers. In your efforts to find a clue, you&#39;ve found a binary code written on the wall behind a vase, and realized that it must be an encrypted message. After some thought, your first guess is that each consecutive <code>8</code> bits of the code stand for the character with the corresponding <a href="http://www.ascii-code.com/" target="_blank" rel="noreferrer">extended ASCII code</a>.</p><p>Assuming that your hunch is correct, decode the message.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><p>For <code>code = &quot;010010000110010101101100011011000110111100100001&quot;</code>, the output should be</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">message_from_binary_code(code) = &quot;Hello!&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">message_from_binary_code(code) = &quot;Hello!&quot;</span></span></code></pre></div><p>The first <code>8</code> characters of the code are <code>01001000</code>, which is <code>72</code> in the binary numeral system. <code>72</code> stands for <code>H</code> in the <em>ASCII-table</em>, so the first letter is <code>H</code>. Other letters can be obtained in the same manner.</p><h2 id="input-output" tabindex="-1">Input/Output <a class="header-anchor" href="#input-output" aria-label="Permalink to &quot;Input/Output&quot;">​</a></h2><ul><li><p><strong>[input] string code</strong></p><p>A string, the encrypted message consisting of characters <code>&#39;0&#39;</code> and <code>&#39;1&#39;</code>.</p><p><em>Guaranteed constraints:</em><code>0 &lt; code.length &lt; 800</code>.</p></li></ul><h2 id="solution" tabindex="-1">Solution <a class="header-anchor" href="#solution" aria-label="Permalink to &quot;Solution&quot;">​</a></h2><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-2mAhD" id="tab-E1YO7l3" checked="checked"><label for="tab-E1YO7l3">PYTHON</label><input type="radio" name="group-2mAhD" id="tab-fazhUll"><label for="tab-fazhUll">JAVASCRIPT</label></div><div class="blocks"><div class="language-py vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">message_from_binary_code</span><span style="color:#E1E4E8;">(code):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">.join([</span><span style="color:#79B8FF;">chr</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">(code[i:i</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">], </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)) </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(code), </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">)])</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(message_from_binary_code(</span><span style="color:#9ECBFF;">&#39;010010000110010101101100011011000110111100100001&#39;</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">message_from_binary_code</span><span style="color:#24292E;">(code):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">.join([</span><span style="color:#005CC5;">chr</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">(code[i:i</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">], </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(code), </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">)])</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(message_from_binary_code(</span><span style="color:#032F62;">&#39;010010000110010101101100011011000110111100100001&#39;</span><span style="color:#24292E;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">messageFromBinaryCode</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">code</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> code</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">.</span><span style="color:#F97583;">{8}</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">char</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> String.</span><span style="color:#B392F0;">fromCharCode</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(char, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">messageFromBinaryCode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;010010000110010101101100011011000110111100100001&#39;</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">messageFromBinaryCode</span><span style="color:#24292E;">(</span><span style="color:#E36209;">code</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> code</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">.</span><span style="color:#D73A49;">{8}</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">char</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">fromCharCode</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(char, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">messageFromBinaryCode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;010010000110010101101100011011000110111100100001&#39;</span><span style="color:#24292E;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></div></div>`,11),p=[l];function r(t,c,i,y,d,E){return a(),n("div",null,p)}const h=s(o,[["render",r]]);export{u as __pageData,h as default};
