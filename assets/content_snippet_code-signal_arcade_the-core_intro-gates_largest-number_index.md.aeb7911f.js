import{_ as s,o as a,c as e,Q as n}from"./chunks/framework.b2e84fab.js";const m=JSON.parse('{"title":"Largest Number","description":"","frontmatter":{"title":"Largest Number"},"headers":[],"relativePath":"content/snippet/code-signal/arcade/the-core/intro-gates/largest-number/index.md","filePath":"content/snippet/code-signal/arcade/the-core/intro-gates/largest-number/index.md"}'),l={name:"content/snippet/code-signal/arcade/the-core/intro-gates/largest-number/index.md"},t=n(`<h1 id="largest-number" tabindex="-1">Largest Number <a class="header-anchor" href="#largest-number" aria-label="Permalink to &quot;Largest Number&quot;">​</a></h1><p>Given an integer <code>n</code>, return the largest number that contains exactly <code>n</code> digits.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><p>For <code>n = 2</code>, the output should be</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">largest_number(n) = 99</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">largest_number(n) = 99</span></span></code></pre></div><h2 id="solution" tabindex="-1">Solution <a class="header-anchor" href="#solution" aria-label="Permalink to &quot;Solution&quot;">​</a></h2><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-exiaY" id="tab-nidQT9-" checked="checked"><label for="tab-nidQT9-">PYTHON</label></div><div class="blocks"><div class="language-py vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">largest_number</span><span style="color:#E1E4E8;">(n):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;9&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> n)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(largest_number(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">largest_number</span><span style="color:#24292E;">(n):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">int</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;9&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> n)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(largest_number(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></div></div>`,7),p=[t];function o(r,c,i,d,u,b){return a(),e("div",null,p)}const y=s(l,[["render",o]]);export{m as __pageData,y as default};
