import{_ as s,o as n,c as a,Q as e}from"./chunks/framework.QBCT-Upj.js";const b=JSON.parse('{"title":"Persistent Bugger","description":"","frontmatter":{"title":"Persistent Bugger"},"headers":[],"relativePath":"content/snippet/codewars/6-kyu/persistent-bugger/index.md","filePath":"content/snippet/codewars/6-kyu/persistent-bugger/index.md"}'),p={name:"content/snippet/codewars/6-kyu/persistent-bugger/index.md"},l=e(`<h1 id="persistent-bugger" tabindex="-1">Persistent Bugger <a class="header-anchor" href="#persistent-bugger" aria-label="Permalink to &quot;Persistent Bugger&quot;">​</a></h1><p>Write a function, <code>persistence</code>, that takes in a positive parameter <code>num</code> and returns its multiplicative persistence, which is the number of times you must multiply the digits in <code>num</code> until you reach a single digit.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><p>For example <strong>(Input --&gt; Output)</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">39 --&gt; 3 (because 3*9 = 27, 2*7 = 14, 1*4 = 4 and 4 has only one digit)</span></span>
<span class="line"><span style="color:#e1e4e8;">999 --&gt; 4 (because 9*9*9 = 729, 7*2*9 = 126, 1*2*6 = 12, and finally 1*2 = 2)</span></span>
<span class="line"><span style="color:#e1e4e8;">4 --&gt; 0 (because 4 is already a one-digit number)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">39 --&gt; 3 (because 3*9 = 27, 2*7 = 14, 1*4 = 4 and 4 has only one digit)</span></span>
<span class="line"><span style="color:#24292e;">999 --&gt; 4 (because 9*9*9 = 729, 7*2*9 = 126, 1*2*6 = 12, and finally 1*2 = 2)</span></span>
<span class="line"><span style="color:#24292e;">4 --&gt; 0 (because 4 is already a one-digit number)</span></span></code></pre></div><h2 id="solution" tabindex="-1">Solution <a class="header-anchor" href="#solution" aria-label="Permalink to &quot;Solution&quot;">​</a></h2><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-EGlXk" id="tab-H3jSVAA" checked="checked"><label for="tab-H3jSVAA">PYTHON</label></div><div class="blocks"><div class="language-py vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> math</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">persistent_bugger</span><span style="color:#E1E4E8;">(n):</span></span>
<span class="line"><span style="color:#E1E4E8;">    count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">(n)) </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        n </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> math.prod([</span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">(i) </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">(n)])</span></span>
<span class="line"><span style="color:#E1E4E8;">        count </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> count</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(persistent_bugger(</span><span style="color:#79B8FF;">39</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> math</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">persistent_bugger</span><span style="color:#24292E;">(n):</span></span>
<span class="line"><span style="color:#24292E;">    count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(n)) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> math.prod([</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">(i) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(n)])</span></span>
<span class="line"><span style="color:#24292E;">        count </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> count</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(persistent_bugger(</span><span style="color:#005CC5;">39</span><span style="color:#24292E;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></div></div>`,7),o=[l];function t(r,c,i,y,E,d){return n(),a("div",null,o)}const g=s(p,[["render",t]]);export{b as __pageData,g as default};
