import{_ as s,o as a,c as i,R as e}from"./chunks/framework.eQfkPAEx.js";const g=JSON.parse('{"title":"Array Packing","description":"","frontmatter":{"title":"Array Packing"},"headers":[],"relativePath":"content/snippet/code-signal/arcade/the-core/corner-of-0s-and-1s/array-packing/index.md","filePath":"content/snippet/code-signal/arcade/the-core/corner-of-0s-and-1s/array-packing/index.md"}'),n={name:"content/snippet/code-signal/arcade/the-core/corner-of-0s-and-1s/array-packing/index.md"},t=e(`<h1 id="array-packing" tabindex="-1">Array Packing <a class="header-anchor" href="#array-packing" aria-label="Permalink to &quot;Array Packing&quot;">​</a></h1><p>You are given an array of up to four non-negative integers, each less than <code>256</code>.</p><p>Your task is to pack these integers into one number <code>M</code> in the following way:</p><ul><li>The first element of the array occupies the first <code>8</code> bits of <code>M</code>;</li><li>The second element occupies next <code>8</code> bits, and so on.</li></ul><p>Return the obtained integer <code>M</code>.</p><p>Note: the phrase <em>&quot;first bits of <code>M</code>&quot;</em> refers to the <em>least significant bits</em> of <code>M</code> - the right-most bits of an integer. For further clarification see the following example.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><p>For <code>a = [24, 85, 0]</code>, the output should be</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>array_packing(a) = 21784</span></span></code></pre></div><p>An array <code>[24, 85, 0]</code> looks like <code>[00011000, 01010101, 00000000]</code> in binary. After packing these into one number we get <code>00000000 01010101 00011000</code> (spaces are placed for convenience), which equals to <code>21784</code>.</p><h2 id="input-output" tabindex="-1">Input/Output <a class="header-anchor" href="#input-output" aria-label="Permalink to &quot;Input/Output&quot;">​</a></h2><ul><li><p><strong>[input] array.integer a</strong></p><p><em>Guaranteed constraints:</em><code>1 ≤ a.length ≤ 4</code>, <code>0 ≤ a[i] &lt; 256</code>.</p></li></ul><h2 id="solution" tabindex="-1">Solution <a class="header-anchor" href="#solution" aria-label="Permalink to &quot;Solution&quot;">​</a></h2><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group--nY0A" id="tab-ZMoP5tM" checked="checked"><label for="tab-ZMoP5tM">PYTHON</label></div><div class="blocks"><div class="language-py vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> array_packing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.join(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).zfill(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> reversed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(array_packing([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">85</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></div></div>`,14),p=[t];function l(r,h,o,c,d,k){return a(),i("div",null,p)}const E=s(n,[["render",l]]);export{g as __pageData,E as default};
