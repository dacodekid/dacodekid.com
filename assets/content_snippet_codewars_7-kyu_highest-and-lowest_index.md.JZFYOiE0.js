import{_ as s,o as a,c as i,R as n}from"./chunks/framework.eQfkPAEx.js";const g=JSON.parse('{"title":"Highest and Lowest","description":"","frontmatter":{"title":"Highest and Lowest"},"headers":[],"relativePath":"content/snippet/codewars/7-kyu/highest-and-lowest/index.md","filePath":"content/snippet/codewars/7-kyu/highest-and-lowest/index.md"}'),t={name:"content/snippet/codewars/7-kyu/highest-and-lowest/index.md"},e=n(`<h1 id="highest-and-lowest" tabindex="-1">Highest and Lowest <a class="header-anchor" href="#highest-and-lowest" aria-label="Permalink to &quot;Highest and Lowest&quot;">​</a></h1><p>In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Input: &quot;1 2 3 4 5&quot;   =&gt;  Output: &quot;5 1&quot;</span></span>
<span class="line"><span>Input: &quot;1 2 -3 4 5&quot;  =&gt;  Output: &quot;5 -3&quot;</span></span>
<span class="line"><span>Input: &quot;1 9 3 4 -5&quot;  =&gt;  Output: &quot;9 -5&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>highest_and_lowest(&quot;1 2 3 4 5&quot;);  // return &quot;5 1&quot;</span></span>
<span class="line"><span>highest_and_lowest(&quot;1 2 -3 4 5&quot;); // return &quot;5 -3&quot;</span></span>
<span class="line"><span>highest_and_lowest(&quot;1 9 3 4 -5&quot;); // return &quot;9 -5&quot;</span></span></code></pre></div><h3 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">​</a></h3><ul><li>All numbers are valid <code>Int32</code>, no <em>need</em> to validate them.</li><li>There will always be at least one number in the input string.</li><li>Output string must be two numbers separated by a single space, and highest number is first.</li></ul><h2 id="solution" tabindex="-1">Solution <a class="header-anchor" href="#solution" aria-label="Permalink to &quot;Solution&quot;">​</a></h2><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-gBank" id="tab-OH4Miuc" checked="checked"><label for="tab-OH4Miuc">PYTHON</label></div><div class="blocks"><div class="language-py vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> highest_and_lowest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(numbers):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, numbers.split()))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(numbers)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39; &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(numbers))</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(highest_and_lowest(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1 2 3 4 5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># return &quot;5 1&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(highest_and_lowest(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1 2 -3 4 5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># return &quot;5 -3&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(highest_and_lowest(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1 9 3 4 -5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># return &quot;9 -5&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></div></div>`,8),l=[e];function p(h,r,o,k,d,u){return a(),i("div",null,l)}const E=s(t,[["render",p]]);export{g as __pageData,E as default};
